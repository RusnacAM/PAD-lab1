# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from scheduler_svc import scheduler_pb2 as scheduler__svc_dot_scheduler__pb2


class SchedulerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAppt = channel.unary_unary(
                '/scheduler.Scheduler/CreateAppt',
                request_serializer=scheduler__svc_dot_scheduler__pb2.CreateAppointment.SerializeToString,
                response_deserializer=scheduler__svc_dot_scheduler__pb2.CreateResponse.FromString,
                )
        self.GetAppt = channel.unary_unary(
                '/scheduler.Scheduler/GetAppt',
                request_serializer=scheduler__svc_dot_scheduler__pb2.GetAppointments.SerializeToString,
                response_deserializer=scheduler__svc_dot_scheduler__pb2.GetResponse.FromString,
                )
        self.UpdateAppt = channel.unary_unary(
                '/scheduler.Scheduler/UpdateAppt',
                request_serializer=scheduler__svc_dot_scheduler__pb2.UpdateAppointment.SerializeToString,
                response_deserializer=scheduler__svc_dot_scheduler__pb2.UpdateResponse.FromString,
                )
        self.DeleteAppt = channel.unary_unary(
                '/scheduler.Scheduler/DeleteAppt',
                request_serializer=scheduler__svc_dot_scheduler__pb2.DeleteAppointment.SerializeToString,
                response_deserializer=scheduler__svc_dot_scheduler__pb2.DeleteResponse.FromString,
                )
        self.Check = channel.unary_unary(
                '/scheduler.Scheduler/Check',
                request_serializer=scheduler__svc_dot_scheduler__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=scheduler__svc_dot_scheduler__pb2.HealthCheckResponse.FromString,
                )


class SchedulerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateAppt(self, request, context):
        """Service Methods
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAppt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAppt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAppt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Check(self, request, context):
        """Health Check Methods
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SchedulerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAppt': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAppt,
                    request_deserializer=scheduler__svc_dot_scheduler__pb2.CreateAppointment.FromString,
                    response_serializer=scheduler__svc_dot_scheduler__pb2.CreateResponse.SerializeToString,
            ),
            'GetAppt': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAppt,
                    request_deserializer=scheduler__svc_dot_scheduler__pb2.GetAppointments.FromString,
                    response_serializer=scheduler__svc_dot_scheduler__pb2.GetResponse.SerializeToString,
            ),
            'UpdateAppt': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAppt,
                    request_deserializer=scheduler__svc_dot_scheduler__pb2.UpdateAppointment.FromString,
                    response_serializer=scheduler__svc_dot_scheduler__pb2.UpdateResponse.SerializeToString,
            ),
            'DeleteAppt': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAppt,
                    request_deserializer=scheduler__svc_dot_scheduler__pb2.DeleteAppointment.FromString,
                    response_serializer=scheduler__svc_dot_scheduler__pb2.DeleteResponse.SerializeToString,
            ),
            'Check': grpc.unary_unary_rpc_method_handler(
                    servicer.Check,
                    request_deserializer=scheduler__svc_dot_scheduler__pb2.HealthCheckRequest.FromString,
                    response_serializer=scheduler__svc_dot_scheduler__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scheduler.Scheduler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Scheduler(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateAppt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/CreateAppt',
            scheduler__svc_dot_scheduler__pb2.CreateAppointment.SerializeToString,
            scheduler__svc_dot_scheduler__pb2.CreateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAppt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/GetAppt',
            scheduler__svc_dot_scheduler__pb2.GetAppointments.SerializeToString,
            scheduler__svc_dot_scheduler__pb2.GetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateAppt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/UpdateAppt',
            scheduler__svc_dot_scheduler__pb2.UpdateAppointment.SerializeToString,
            scheduler__svc_dot_scheduler__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAppt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/DeleteAppt',
            scheduler__svc_dot_scheduler__pb2.DeleteAppointment.SerializeToString,
            scheduler__svc_dot_scheduler__pb2.DeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler.Scheduler/Check',
            scheduler__svc_dot_scheduler__pb2.HealthCheckRequest.SerializeToString,
            scheduler__svc_dot_scheduler__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
